#!/bin/bash
#
# ${V_SCRIPT_NAME} is a script which can download the latest debian package from the Spotify
# repository and convert it into an RPM. It is also capable of installing, scheduling and storing
# the RPMs in a local filesystem repo for installing Spotify updates alongside regular system updates
#
# ${V_SCRIPT_NAME}
#
#  - Regular prompt based mode to create an RPM and optionally install and create an update schedule
#
# ${V_SCRIPT_NAME} -noprompt
#
#  - Create the RPM
#  - Install the Spotify RPM
#  - Set up a monthly scheduled update job
#  - Set up a local filesystem repo
#
# ${V_SCRIPT_NAME} -noroot
#
#  - In this mode spotify-easyrpm will not require root/sudo
#  - Spotify will run from your home folder
#  - Schedule automatic updates (optional)
#  - Not currently compatible with -noprompt mode
#
# ${V_SCRIPT_NAME} -remove-schedule
#
#  - Removes the schedule and local repo if present

#set -x

## VARIABLES ##


V_OPTIONS="${1}"

V_SCRIPT_NAME="spotify-easyrpm"
V_CONFIG_FILE="${HOME}/.${V_SCRIPT_NAME}"

V_SYS_ARCH="$(uname -p)"

V_HTTP_REPO="http://repository.spotify.com/pool/non-free/s/spotify-client/"

V_SOURCES_DIR="${HOME}/rpmbuild/SOURCES"
V_SPECS_DIR="${HOME}/rpmbuild/SPECS"
V_RPMS_DIR="${HOME}/rpmbuild/RPMS"

V_TMP_CRON_FILE="${HOME}/${V_SCRIPT_NAME}.tmp"
V_LOCAL_REPO="/var/cache/${V_SCRIPT_NAME}"

V_NOROOT_INSTALL_DIR="${HOME}/.local/spotify-client"
V_NOROOT_DESKTOP_DIR="${HOME}/.local/share/applications"


## SHARED FUNCTIONS ##


f_logo() {
cat <<EOF

┌─┐┌─┐┌─┐┌┬┐┬┌─┐┬ ┬   ┌─┐┌─┐┌─┐┬ ┬┬─┐┌─┐┌┬┐
└─┐├─┘│ │ │ │├┤ └┬┘───├┤ ├─┤└─┐└┬┘├┬┘├─┘│││
└─┘┴  └─┘ ┴ ┴└   ┴    └─┘┴ ┴└─┘ ┴ ┴└─┴  ┴ ┴

EOF
sleep 3
cat <<EOF
VERSION: 0.7-dev
SUPPORT: https://github.com/megamaced/spotify-easyrpm/issues

MODE: ${V_RUN_MODE}
EOF
sleep 2
}

f_help() {
clear
if [[ "${V_OPTIONS}" == "-h" ]] || [[ "${V_OPTIONS}" == "--help" ]]; then
f_logo
cat <<EOF

${V_SCRIPT_NAME} is a script which can download the latest debian package from the Spotify
repository and convert it into an RPM. It is also capable of installing, scheduling and storing
the RPMs in a local filesystem repo for installing Spotify updates alongside regular system updates

 ${V_SCRIPT_NAME}

  - Regular prompt based mode to create an RPM and optionally install and create an update schedule

 ${V_SCRIPT_NAME} -noprompt

  - Create the RPM
  - Install the Spotify RPM
  - Set up a monthly scheduled update job
  - Set up a local filesystem repo

 ${V_SCRIPT_NAME} -noroot

  - In this mode spotify-easyrpm will not require root/sudo
  - Spotify will run from your home folder
  - Schedule automatic updates (optional)
  - Not currently compatible with -noprompt mode

 ${V_SCRIPT_NAME} -remove-schedule

  - Removes the schedule and local repo if present

 
EOF
 exit 0
fi
}

f_error() {
echo "$1" 1>&2
f_cleanup
exit 1
}

f_cleanup() {
echo "Cleaning up"
rm "${V_SOURCES_DIR}"/index.html > /dev/null 2>&1
rm "${V_SOURCES_DIR}"/data.tar.gz > /dev/null 2>&1
rm -r "${V_SOURCES_DIR:?}"/usr > /dev/null 2>&1
rm -r "${V_SOURCES_DIR}"/spotify-client* > /dev/null 2>&1
echo "done"
}

f_root_check() {
if [[ "$(id -u)" == "0" ]]; then
 f_error "Do not run as root"
fi
}

f_arch_check() {
if [[ "${V_SYS_ARCH}" == i686 ]]; then
 V_DEB_ARCH=i386
 V_RPM_ARCH=i586
elif [[ "${V_SYS_ARCH}" == x86_64 ]]; then
 V_DEB_ARCH=amd64
 V_RPM_ARCH=x86_64
else
 f_error "Unsupported architecture. Aborting"
fi
}

f_mode_check() {
if [[ "${V_OPTIONS}" == "-noprompt" ]]; then
V_RUN_MODE="noprompt"
elif [[ "${V_OPTIONS}" == "-scheduled" ]]; then
V_RUN_MODE="scheduled"
elif [[ "${V_OPTIONS}" == "-noroot" ]]; then
V_RUN_MODE="noroot"
elif [[ "${V_OPTIONS}" == "-remove-schedule" ]]; then
V_RUN_MODE="remove-schedule"
elif [[ -z "${V_OPTIONS}" ]]; then
V_RUN_MODE="prompt"
fi
}


f_config() {
  if [ -f "${V_CONFIG_FILE}" ]; then
    source "${V_CONFIG_FILE}"
  else
    cat << EOF >> "${V_CONFIG_FILE}"

# PREFS
PREF_PROMPT_SCHEDULE=

# NO ROOT CONFIG
V_NOROOT_INSTALLED_VER=

EOF
    fi
}

f_download() {
echo "Downloading latest Spotify debs"
if ! wget -e robots=off --no-directories --recursive --no-parent -P "${V_SOURCES_DIR}"/ "${V_HTTP_REPO}" -A spotify-client*"${V_DEB_ARCH}".deb; then
f_error "Failed to download Spotify. Aborting"
fi
echo "Checking if we downloaded multiple versions"
if [[ "$(find "${V_SOURCES_DIR}" -name spotify-client*.deb | wc -l)" -gt 1 ]]; then
 echo "Removing the older downloaded versions"
 find "${V_SOURCES_DIR}" -name spotify-client*.deb | sort | sed \$d | xargs -d '\n' rm
fi
}


f_set_deb_ver() {
V_DEB_VER="$(find "${V_SOURCES_DIR}"/ -name spotify-client*.deb | cut -f2 -d"_" | cut -f1 -d"-")"
}


f_create_local_build_dirs() {
echo "Creating build dirs in ${HOME}/rpmbuild"
if ! mkdir -p "${HOME}"/rpmbuild/{BUILD,BUILDROOT,OTHER,RPMS,SOURCES,SPECS,SRPMS}; then
f_error "Failed to create rpmbuild root. Aborting"
fi
echo "Creating .rpmmacros if it doesn't exist"
if [[ ! -f "${HOME}"/.rpmmacros ]]; then
 cat << EOF >> "${HOME}"/.rpmmacros
%_topdir /home/${USERNAME}/rpmbuild
EOF
fi
}

f_extract_deb() {
echo "Extracting deb and preparing"
ar -x "${V_SOURCES_DIR}"/spotify-client*"${V_DEB_ARCH}".deb || f_error "Failed to extract deb"
rm control.tar.gz debian-binary
mv data.tar.gz "${V_SOURCES_DIR}"/
tar xzf "${V_SOURCES_DIR}"/data.tar.gz -C "${V_SOURCES_DIR}"/
mkdir -p "${V_SOURCES_DIR}"/spotify-client
mv "${V_SOURCES_DIR}"/usr "${V_SOURCES_DIR}"/spotify-client/
}

f_script_location_check() {
if [[ ! -f /usr/bin/"${V_SCRIPT_NAME}" ]]; then
 f_error "Please move ${V_SCRIPT_NAME} to /usr/bin"
fi
}


## REGULAR ROOT BUILD / INSTALL MODE FUNCTIONS ##


f_rpm_install_build_deps() {
if ! rpm -q rpm-build > /dev/null 2>&1; then
 echo "Installing build dependencies (rpm-build)"
 if ! sudo zypper --non-interactive in rpm-build; then
 f_error "Failed to install build dependencies. Aborting"
 fi
fi
if ! rpm -q update-desktop-files > /dev/null 2>&1; then
 echo "Installing build dependencies (update-desktop-files)"
 if ! sudo zypper --non-interactive in update-desktop-files; then
 f_error "Failed to install build dependencies. Aborting"
 fi
fi
}

f_rpm_prepare_src() {
echo "Preparing RPM src tarball"
mkdir -p "${V_SOURCES_DIR}"/spotify-client/usr/share/applications
f_rpm_desktop_entry
f_set_deb_ver
tar czf "${V_SOURCES_DIR}"/spotify-client-"${V_DEB_VER}".tar.gz -C "${V_SOURCES_DIR}"/ spotify-client
}

f_rpm_desktop_entry() {
cat << EOF >> "${V_SOURCES_DIR}"/spotify-client/usr/share/applications/spotify.desktop
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon=/usr/share/spotify/icons/spotify-linux-64.png
Exec=spotify %U
TryExec=spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
EOF
}

f_rpm_ver_compare() {
echo "Comparing downloaded version to installed version (if any)"
f_set_deb_ver
if [[ "$(rpm -q spotify-client | cut -f3 -d"-")" == "${V_DEB_VER}" ]]; then
 if [[ "${V_RUN_MODE}" != "prompt" ]]; then
  f_cleanup
  exit 0
 else
 while true
  do
   read -rp "You have downloaded version ${V_DEB_VER} which is already installed. Continue? (y/n)" Q_SAME_VER_CONTINUE
    case $Q_SAME_VER_CONTINUE in
 
      y ) echo "ok"
      break;;

      n ) f_rpm_schedule_prompt
          f_cleanup
          echo "bye"
      exit;;

   esac
 done
 fi
fi
}

f_rpm_spec_bak() {
echo "Backing up previous build file (if any)"
if [[ -f "${V_SPECS_DIR}"/spotify.spec ]]; then
 mv "${V_SPECS_DIR}"/spotify.spec "${V_SPECS_DIR}"/spotify.spec.old
fi
}

f_rpm_spec() {
echo "Writing new build file"

cat << EOF >> "${V_SPECS_DIR}"/spotify.spec
#
# spec file for package spotify-client
#
# Copyright (c) 2015 SUSE LINUX Products GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

Name:   spotify-client
Version:  ${V_DEB_VER}
Release:  0
License:  https://www.spotify.com/legal/end-user-agreement
Summary:  Spotify streaming music client
Vendor:   Spotify AB
Url:    https://www.spotify.com
Source:   %{name}-%{version}.tar.gz
BuildRoot:  %{_tmppath}/%{name}-%{version}-build
BuildRequires:  update-desktop-files
Requires: libasound2
Requires: libcurl4
Requires: gconf2
Requires: libgtk-2_0-0
Requires: libglib-2_0-0
Requires: libgcrypt20
Requires: mozilla-nss
Requires: libudev1
Requires: libX11-6
Requires: libXtst6
Requires: libopenssl1_0_0
Recommends: libavcodec56
Recommends: libavformat56
Recommends: zenity
Suggests: libnotify4
AutoReq:  no

%description
The Spotify desktop client unofficially supports Linux, meaning that there is a
native client for Linux but we do not offer official support for client-related
problems on this platform. If you are having severe problems with the native
Linux client, there are a few alternatives that you can try:

- Using the web player: https://play.spotify.com (requires Adobe Flash plugin)
- Running the native Windows client in Wine (not recommended, but should work)

Otherwise, the native Linux client is the recommended way to listen to Spotify
on Linux systems.

%prep
%setup -q -n %{name} 

%install
mkdir -p %{buildroot}/usr
cp -r usr %{buildroot}/

%post

%desktop_database_post

%postun

%desktop_database_postun

%clean

%files
%defattr(-,root,root)
#%doc ChangeLog README COPYING
%dir /usr/share/spotify
/usr/share/spotify/*
/usr/bin/spotify
/usr/share/doc/spotify-client/*
/usr/share/applications/spotify.desktop
EOF
}

f_rpm_run_build() {
echo "Running rpm build"
if ! rpmbuild -bb --quiet --clean "${V_SPECS_DIR}"/spotify.spec; then
f_error "Spotify RPM failed to build. Aborting"
else
echo "Spotify RPM created in ${V_RPMS_DIR}/${V_RPM_ARCH}/"
fi
}

f_rpm_install_prompt() {
if [[ "${V_RUN_MODE}" != "prompt" ]]; then
  f_rpm_install
else 
 while true
  do
   read -rp "Do you wish to install the Spotify RPM (y/n)?" Q_RPM_INSTALL

  case $Q_RPM_INSTALL in
  y ) f_rpm_install
   break;;

  n ) echo "OK not installing now" 
   break;;

  esac
 done
fi
}

f_rpm_install() {
echo "Installing spotify-client-${V_DEB_VER}"
if ! sudo zypper --non-interactive --no-gpg-check in "${V_RPMS_DIR}"/"${V_RPM_ARCH}"/spotify-client-"${V_DEB_VER}"*"${V_RPM_ARCH}".rpm; then
  f_error "Failed to install spotify-client-${V_DEB_VER}"
fi
}


## SCHEDULE / REPO MODE FUNCTIONS ##


f_rpm_schedule_prompt() {
if [[ "${V_RUN_MODE}" != "prompt" ]]; then
 V_SCHEDULE_FREQUENCY="monthly"
 f_rpm_create_schedule
else
 if ! crontab -l | grep "${V_SCRIPT_NAME}"; then # Add here && [[ "${PREF_PROMPT_SCHEDULE}" != "no" ]] in v0.8
  while true
  do
   read -rp "Do you wish to set up an automated cron job and local repo to enable updating Spotify alongside regular system updates (y/n)?" Q_SCHEDULE_ANSWER

  case $Q_SCHEDULE_ANSWER in
  y ) V_ASK_SCHEDULE_FREQUENCY="yes"
   break;;

  n ) echo "Ok skipping..."
      # add here skip preference to config file
   break;;

  esac
 done
 fi
fi
if [[ "${V_ASK_SCHEDULE_FREQUENCY}" == "yes" ]]; then
  while true
  do
   read -rp "How often do you want to check for updates (weekly/monthly)?" Q_SCHEDULE_FREQUENCY_ANSWER

  case $Q_SCHEDULE_FREQUENCY_ANSWER in
  weekly ) V_SCHEDULE_FREQUENCY="weekly"
           f_rpm_create_schedule
   break;;

  monthly ) V_SCHEDULE_FREQUENCY="monthly"
           f_rpm_create_schedule
   break;;

  esac
 done
fi
}

f_rpm_create_schedule() {
f_script_location_check
if ! rpm -q createrepo > /dev/null 2>&1; then
 echo "Installing CreateRepo for local filesystem repo"
 if ! sudo zypper --non-interactive in createrepo; then
 f_error "Failed to install createrepo. Aborting"
 fi
fi
if [[ ! -d "${V_LOCAL_REPO}" ]]; then
 echo "Creating local filesystem repo at ${V_LOCAL_REPO}"
 if ! sudo mkdir -p ${V_LOCAL_REPO}; then
  f_error "Failed to create local filesystem repo at ${V_LOCAL_REPO}. Aborting"
 fi
fi
if ! sudo find ${V_LOCAL_REPO} -type d -exec chmod 777 {} \+; then
 f_error "Failed to chmod ${V_LOCAL_REPO}"
fi
if ! sudo find ${V_LOCAL_REPO} -type f -exec chmod 666 {} \+; then
 f_error "Failed to chmod ${V_LOCAL_REPO}"
fi
f_rpm_update_local_repo
if [[ ! -f /etc/zypp/repos.d/${V_SCRIPT_NAME}.repo ]]; then
 echo "Adding local file system repository to zypper"
 if ! sudo zypper ar -G --refresh "${V_LOCAL_REPO}" "${V_SCRIPT_NAME}"; then
  f_error "Failed to add local repo to zypper. Aborting" 
 fi
fi
f_create_schedule
}

f_rpm_update_local_repo() {
echo "Moving RPMs from your rpmbuild ${V_RPMS_DIR} to your local repo ${V_LOCAL_REPO}"
find "${V_RPMS_DIR}"/"${V_RPM_ARCH}"/ -name spotify-client-*"${V_RPM_ARCH}".rpm -type f -exec mv -t "${V_LOCAL_REPO}" {} \+
if ! createrepo "${V_LOCAL_REPO}"; then
 f_error "Failed to create local repo. Aborting"
fi
}

f_create_schedule() {
if ! crontab -l | grep "${V_SCRIPT_NAME}"; then
 echo "Creating cron job in your crontab"
 crontab -l > "${V_TMP_CRON_FILE}"
 cat << EOF >> "${V_TMP_CRON_FILE}"
@${V_SCHEDULE_FREQUENCY} /usr/bin/${V_SCRIPT_NAME} -scheduled
EOF
fi
if crontab "${V_TMP_CRON_FILE}"; then
  rm "${V_TMP_CRON_FILE}"
else
  rm "${V_TMP_CRON_FILE}"
  f_error "Failed to create cron job in your crontab"
fi
# Remove legacy V_TMP_CRON_FILE if present
if [[ -f /etc/cron.d/"${V_SCRIPT_NAME}" ]]; then
  echo "Removing legacy V_TMP_CRON_FILE at /etc/cron.d/${V_SCRIPT_NAME}"
  sudo rm /etc/cron.d/"${V_SCRIPT_NAME}"
fi
}

f_remove_schedule() {
 if crontab -l | grep "${V_SCRIPT_NAME}"; then
  echo "Removing ${V_SCRIPT_NAME} from your crontab"
  crontab -l | grep -v "${V_SCRIPT_NAME}" > "${V_TMP_CRON_FILE}"
  crontab "${V_TMP_CRON_FILE}"
  rm "${V_TMP_CRON_FILE}"
 fi
 if [[ -f /etc/zypp/repos.d/${V_SCRIPT_NAME}.repo ]]; then
  echo "Removing ${V_SCRIPT_NAME} zypper repo"
  sudo zypper rr "${V_SCRIPT_NAME}"
 fi
 if [[ -d "${V_LOCAL_REPO}" ]]; then
  echo "Removing ${V_SCRIPT_NAME} repo from filesystem"
  sudo rm -r "${V_LOCAL_REPO}"
 fi
 # Remove legacy V_TMP_CRON_FILE if present
if [[ -f /etc/cron.d/"${V_SCRIPT_NAME}" ]]; then
  echo "Removing legacy V_TMP_CRON_FILE at /etc/cron.d/${V_SCRIPT_NAME}"
  sudo rm /etc/cron.d/"${V_SCRIPT_NAME}"
fi
}


## NO ROOT MODE FUNCTIONS ##


f_noroot_desktop_entry() {
cat << EOF >> "${V_NOROOT_DESKTOP_DIR}"/spotify.desktop
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon=${V_NOROOT_INSTALL_DIR}/icons/spotify-linux-64.png
Exec=spotify %U
TryExec=${V_NOROOT_INSTALL_DIR}/spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
EOF
}


f_noroot_ver_compare() {
  f_set_deb_ver
  if [[ "${V_NOROOT_INSTALLED_VER}" == "${V_DEB_VER}" ]]; then
   while true
    do
      read -rp "You have downloaded version ${V_DEB_VER} which is already installed. Continue? (y/n)" Q_NOROOT_SAME_VER
       case $Q_NOROOT_SAME_VER in
 
        y ) echo "ok"
            break;;

        n ) f_noroot_schedule_prompt
            f_cleanup
            echo "bye"
      exit;;

    esac
  done
 fi
}

f_noroot_schedule_prompt() {
 if ! crontab -l | grep "${V_SCRIPT_NAME}"; then # Add here && [[ "${PREF_PROMPT_SCHEDULE}" != "no" ]] in v0.8
  while true
  do
   read -rp "Do you wish to set up an automated cron job to enable updating Spotify? (y/n)?" Q_SCHEDULE_ANSWER

  case $Q_SCHEDULE_ANSWER in
  y ) V_ASK_SCHEDULE_FREQUENCY="yes"
   break;;

  n ) echo "Ok skipping..."
      # add here skip preference to config file
   break;;

  esac
 done
fi
if [[ "${V_ASK_SCHEDULE_FREQUENCY}" == "yes" ]]; then
  while true
  do
   read -rp "How often do you want to check for updates (weekly/monthly)?" Q_SCHEDULE_FREQUENCY_ANSWER

  case $Q_SCHEDULE_FREQUENCY_ANSWER in
  weekly ) V_SCHEDULE_FREQUENCY="weekly"
           f_noroot_create_schedule
   break;;

  monthly ) V_SCHEDULE_FREQUENCY="monthly"
           f_noroot_create_schedule
   break;;

  esac
 done
fi
}

f_noroot_create_schedule() {
f_script_location_check
f_create_schedule
}


f_noroot_install() {
  if [ ! -d "${V_NOROOT_INSTALL_DIR}" ]; then
    mkdir -p "${V_NOROOT_INSTALL_DIR}"
  else
    rm -r "${V_NOROOT_INSTALL_DIR}"
    mkdir -p "${V_NOROOT_INSTALL_DIR}"
  fi
  if ! mv "${V_SOURCES_DIR}"/spotify-client/usr/share/spotify/* "${V_NOROOT_INSTALL_DIR}"/; then
    f_error "Failed to install Spotify"
  fi
  sed -i "s/\(V_NOROOT_INSTALLED_VER=\)\(.*\)/\1${V_DEB_VER}/" "${V_CONFIG_FILE}"
  f_noroot_desktop_entry
}


## MAIN PROCESS FUNCTION ##


f_main() {
clear
if [[ "${V_RUN_MODE}" == *prompt ]]; then
 f_logo
 f_rpm_install_build_deps
 f_create_local_build_dirs
 f_download
 f_rpm_ver_compare
 f_extract_deb
 f_rpm_prepare_src
 f_rpm_spec_bak
 f_rpm_spec
 f_rpm_run_build
 f_rpm_install_prompt
 f_rpm_schedule_prompt
elif [[ "${V_RUN_MODE}" == "scheduled" ]]; then
 f_download
 f_rpm_ver_compare
 f_extract_deb
 f_rpm_prepare_src
 f_rpm_spec_bak
 f_rpm_spec
 f_rpm_run_build
 f_rpm_update_local_repo
elif [[ "${V_RUN_MODE}" == "noroot" ]]; then
 f_logo
 f_create_local_build_dirs
 f_download
 f_noroot_ver_compare
 f_extract_deb
 f_noroot_install
 f_noroot_schedule_prompt
elif [[ "${V_RUN_MODE}" == "remove-schedule" ]]; then
 f_logo
 f_remove_schedule
fi
}

### EXECUTION BEGINS ###


f_help
f_root_check
f_arch_check
f_mode_check
f_cleanup
f_config
f_main
f_cleanup
