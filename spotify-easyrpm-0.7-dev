#!/bin/bash
#
#${SCRIPTNAME} is a script which can download the latest debian package from the Spotify
#repository and convert it into an RPM. It is also capable of installing, scheduling and storing
#the RPMs in a local filesystem repo for installing Spotify updates alongside regular system updates
#
# ${SCRIPTNAME}
#
#  - Regular prompt based mode to create an RPM and optionally install and create an update schedule
#
# ${SCRIPTNAME} -noprompt
#
#  - Create the RPM
#  - Install the Spotify RPM
#  - Set up a monthly scheduled update job
#  - Set up a local filesystem repo
#
# ${SCRIPTNAME} -noroot
#
#  - In this mode spotify-easyrpm will not require root/sudo
#  - Spotify will run from your home folder
#  - Schedule automatic updates (optional)
#  - Not currently compatible with -noprompt mode
#
# ${SCRIPTNAME} -remove-schedule
#
#  - Removes the cron job and local repo

set -x

## VARIABLES ##

OPTIONS="${1}"

SCRIPTNAME="spotify-easyrpm"
SYSARCH="$(uname -p)"

SPOTIFYREPO="http://repository.spotify.com/pool/non-free/s/spotify-client/"

SOURCESDIR="${HOME}/rpmbuild/SOURCES"
SPECSDIR="${HOME}/rpmbuild/SPECS"
RPMSDIR="${HOME}/rpmbuild/RPMS"

CRONFILE="${HOME}/${SCRIPTNAME}.tmp"
LOCALREPO="/var/cache/${SCRIPTNAME}"

NOROOTINSTALLDIR="${HOME}/.local/spotify-client"
NOROOTDESKTOPFILEDIR="${HOME}/.local/share/applications"


## SHARED FUNCTIONS ##


f_logo() {
cat <<EOF

┌─┐┌─┐┌─┐┌┬┐┬┌─┐┬ ┬   ┌─┐┌─┐┌─┐┬ ┬┬─┐┌─┐┌┬┐
└─┐├─┘│ │ │ │├┤ └┬┘───├┤ ├─┤└─┐└┬┘├┬┘├─┘│││
└─┘┴  └─┘ ┴ ┴└   ┴    └─┘┴ ┴└─┘ ┴ ┴└─┴  ┴ ┴

EOF
}

f_help() {
if [[ "${OPTIONS}" == "-h" ]] || [[ "${OPTIONS}" == "--help" ]]; then
f_logo
cat <<EOF

${SCRIPTNAME} is a script which can download the latest debian package from the Spotify
repository and convert it into an RPM. It is also capable of installing, scheduling and storing
the RPMs in a local filesystem repo for installing Spotify updates alongside regular system updates

 ${SCRIPTNAME}

  - Regular prompt based mode to create an RPM and optionally install and create an update schedule

 ${SCRIPTNAME} -noprompt

  - Create the RPM
  - Install the Spotify RPM
  - Set up a monthly scheduled update job
  - Set up a local filesystem repo

 ${SCRIPTNAME} -noroot

  - In this mode spotify-easyrpm will not require root/sudo
  - Spotify will run from your home folder
  - Schedule automatic updates (optional)
  - Not currently compatible with -noprompt mode

 ${SCRIPTNAME} -remove-schedule

  - Removes the cron job and local repo

 
EOF
 exit 0
fi
}

f_error() {
echo "$1" 1>&2
f_cleanup
exit 1
}

f_cleanup() {
echo "Cleaning up"
rm "${SOURCESDIR}"/index.html > /dev/null 2>&1
rm "${SOURCESDIR}"/data.tar.gz > /dev/null 2>&1
rm -r "${SOURCESDIR:?}"/usr > /dev/null 2>&1
rm -r "${SOURCESDIR}"/spotify-client* > /dev/null 2>&1
echo "done"
}

f_root_check() {
if [[ "$(id -u)" == "0" ]]; then
 f_error "Do not run as root"
fi
}

f_arch_check() {
if [[ "${SYSARCH}" == i686 ]]; then
 DEBARCH=i386
 RPMARCH=i586
elif [[ "${SYSARCH}" == x86_64 ]]; then
 DEBARCH=amd64
 RPMARCH=x86_64
else
 f_error "Unsupported architecture. Aborting"
fi
}

f_mode_check() {
if [[ "$1" == "-noprompt" ]]; then
RUNMODE="noprompt"
elif [[ "$1" == "-scheduled" ]]; then
RUNMODE="scheduled"
elif [[ "$1" == "-noroot" ]]; then
RUNMODE="noroot"
elif [[ "$1" == "-remove-schedule" ]]; then
RUNMODE="remove-schedule"
elif [[ -z "$1" ]]; then
RUNMODE="prompt"
fi
}


f_config() {
  if [ -f "${HOME}"/."${SCRIPTNAME}" ]; then
    source "${HOME}"/."${SCRIPTNAME}"
  else
    cat << EOF >> "${HOME}"/."${SCRIPTNAME}"

# PREFS
PROMPT_SCHEDULE=

# NO ROOT CONFIG
SPOTIFY_VER_NOROOT=

EOF
    fi
}

f_spotify_download() {
echo "Downloading latest Spotify debs"
if ! wget -e robots=off --no-directories --recursive --no-parent -P "${SOURCESDIR}"/ "${SPOTIFYREPO}" -A spotify-client*"${DEBARCH}".deb; then
f_error "Failed to download Spotify. Aborting"
fi
echo "Checking if we downloaded multiple versions"
if [[ "$(find "${SOURCESDIR}" -name spotify-client*.deb | wc -l)" -gt 1 ]]; then
 echo "Removing the older downloaded versions"
 find "${SOURCESDIR}" -name spotify-client*.deb | sort | sed \$d | xargs -d '\n' rm
fi
}

f_spotify_ver() {
SPOTIFYVER="$(find "${SOURCESDIR}"/ -name spotify-client*.deb | cut -f2 -d"_" | cut -f1 -d"-")"
}

f_create_rpmbuild_dir() {
echo "Creating rpmbuild dirs in ${HOME}/rpmbuild"
if ! mkdir -p "${HOME}"/rpmbuild/{BUILD,BUILDROOT,OTHER,RPMS,SOURCES,SPECS,SRPMS}; then
f_error "Failed to create rpmbuild root. Aborting"
fi
echo "Creating .rpmmacros if it doesn't exist"
if [[ ! -f "${HOME}"/.rpmmacros ]]; then
 cat << EOF >> "${HOME}"/.rpmmacros
%_topdir /home/${USERNAME}/rpmbuild
EOF
fi
}

f_extract_deb() {
echo "Extracting deb and preparing"
ar -x "${SOURCESDIR}"/spotify-client*"${DEBARCH}".deb || f_error "Failed to extract deb"
rm control.tar.gz debian-binary
mv data.tar.gz "${SOURCESDIR}"/
tar xzf "${SOURCESDIR}"/data.tar.gz -C "${SOURCESDIR}"/
mkdir -p "${SOURCESDIR}"/spotify-client
mv "${SOURCESDIR}"/usr "${SOURCESDIR}"/spotify-client/
}

f_script_location_check() {
if [[ ! -f /usr/bin/"${SCRIPTNAME}" ]]; then
 f_error "Please move ${SCRIPTNAME} to /usr/bin"
fi
}


## REGULAR ROOT BUILD / INSTALL MODE FUNCTIONS ##


f_rpmbuild_deps() {
if ! rpm -q rpm-build > /dev/null 2>&1; then
 echo "Installing build dependencies (rpm-build)"
 if ! sudo zypper --non-interactive in rpm-build; then
 f_error "Failed to install build dependencies. Aborting"
 fi
fi
if ! rpm -q update-desktop-files > /dev/null 2>&1; then
 echo "Installing build dependencies (update-desktop-files)"
 if ! sudo zypper --non-interactive in update-desktop-files; then
 f_error "Failed to install build dependencies. Aborting"
 fi
fi
}

f_prepare_rpm_src() {
echo "Preparing RPM src tarball"
mkdir -p "${SOURCESDIR}"/spotify-client/usr/share/applications
f_desktop_entry
f_spotify_ver
tar czf "${SOURCESDIR}"/spotify-client-"${SPOTIFYVER}".tar.gz -C "${SOURCESDIR}"/ spotify-client
}

f_desktop_entry() {
cat << EOF >> "${SOURCESDIR}"/spotify-client/usr/share/applications/spotify.desktop
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon=/usr/share/spotify/icons/spotify-linux-64.png
Exec=spotify %U
TryExec=spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
EOF
}

f_rpm_ver_compare() {
echo "Comparing downloaded version to installed version (if any)"
f_spotify_ver
if [[ "$(rpm -q spotify-client | cut -f3 -d"-")" == "${SPOTIFYVER}" ]]; then
 if [[ "${RUNMODE}" != "prompt" ]]; then
  f_cleanup
  exit 0
 else
 while true
  do
   read -rp "You have downloaded version ${SPOTIFYVER} which is already installed. Continue? (y/n)" CONTINUE
    case $CONTINUE in
 
      y ) echo "ok"
      break;;

      n ) f_create_schedule_prompt
          f_cleanup
          echo "bye"
      exit;;

   esac
 done
 fi
fi
}

f_rpm_spec_bak() {
echo "Backing up previous build file (if any)"
if [[ -f "${SPECSDIR}"/spotify.spec ]]; then
 mv "${SPECSDIR}"/spotify.spec "${SPECSDIR}"/spotify.spec.old
fi
}

f_rpm_spec() {
echo "Writing new build file"

cat << EOF >> "${SPECSDIR}"/spotify.spec
#
# spec file for package spotify-client
#
# Copyright (c) 2015 SUSE LINUX Products GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

Name:   spotify-client
Version:  ${SPOTIFYVER}
Release:  0
License:  https://www.spotify.com/legal/end-user-agreement
Summary:  Spotify streaming music client
Vendor:   Spotify AB
Url:    https://www.spotify.com
Source:   %{name}-%{version}.tar.gz
BuildRoot:  %{_tmppath}/%{name}-%{version}-build
BuildRequires:  update-desktop-files
Requires: libasound2
Requires: libcurl4
Requires: gconf2
Requires: libgtk-2_0-0
Requires: libglib-2_0-0
Requires: libgcrypt20
Requires: mozilla-nss
Requires: libudev1
Requires: libX11-6
Requires: libXtst6
Requires: libopenssl1_0_0
Recommends: libavcodec56
Recommends: libavformat56
Recommends: zenity
Suggests: libnotify4
AutoReq:  no

%description
The Spotify desktop client unofficially supports Linux, meaning that there is a
native client for Linux but we do not offer official support for client-related
problems on this platform. If you are having severe problems with the native
Linux client, there are a few alternatives that you can try:

- Using the web player: https://play.spotify.com (requires Adobe Flash plugin)
- Running the native Windows client in Wine (not recommended, but should work)

Otherwise, the native Linux client is the recommended way to listen to Spotify
on Linux systems.

%prep
%setup -q -n %{name} 

%install
mkdir -p %{buildroot}/usr
cp -r usr %{buildroot}/

%post

%desktop_database_post

%postun

%desktop_database_postun

%clean

%files
%defattr(-,root,root)
#%doc ChangeLog README COPYING
%dir /usr/share/spotify
/usr/share/spotify/*
/usr/bin/spotify
/usr/share/doc/spotify-client/*
/usr/share/applications/spotify.desktop
EOF
}

f_run_rpmbuild() {
echo "Running rpm build"
if ! rpmbuild -bb --quiet --clean "${SPECSDIR}"/spotify.spec; then
f_error "Spotify RPM failed to build. Aborting"
else
echo "Spotify RPM created in ${RPMSDIR}/${RPMARCH}/"
fi
}

f_install_rpm_prompt() {
if [[ "${RUNMODE}" != "prompt" ]]; then
  f_install_rpm
else 
 while true
  do
   read -rp "Do you wish to install the Spotify RPM (y/n)?" INSTALL

  case $INSTALL in
  y ) f_install_rpm
   break;;

  n ) echo "OK not installing now" 
   break;;

  esac
 done
fi
}

f_install_rpm() {
echo "Installing spotify-client-${SPOTIFYVER}"
if ! sudo zypper --non-interactive --no-gpg-check in "${RPMSDIR}"/"${RPMARCH}"/spotify-client-"${SPOTIFYVER}"*"${RPMARCH}".rpm; then
  f_error "Failed to install spotify-client-${SPOTIFYVER}"
fi
}


## SCHEDULE / REPO MODE FUNCTIONS ##


f_create_schedule_prompt() {
if [[ "${RUNMODE}" != "prompt" ]]; then
 FREQUENCY="monthly"
 f_create_schedule
else
 if ! crontab -l | grep "${SCRIPTNAME}"; then # Add here && [[ "${PROMPT_SCHEDULE}" != "no" ]] in v0.8
  while true
  do
   read -rp "Do you wish to set up an automated cron job and local repo to enable updating Spotify alongside regular system updates (y/n)?" SCHEDULE_ANSWER

  case $SCHEDULE_ANSWER in
  y ) ASK_FREQUENCY="yes"
   break;;

  n ) echo "Ok skipping..."
      # add here skip preference to config file
   break;;

  esac
 done
 fi
fi
if [[ "${ASK_FREQUENCY}" == "yes" ]]; then
  while true
  do
   read -rp "How often do you want to check for updates (weekly/monthly)?" FREQUENCY_ANSWER

  case $FREQUENCY_ANSWER in
  weekly ) FREQUENCY="weekly"
           f_create_schedule
   break;;

  monthly ) FREQUENCY="monthly"
           f_create_schedule
   break;;

  esac
 done
fi
}

f_create_schedule() {
f_script_location_check
if ! rpm -q createrepo > /dev/null 2>&1; then
 echo "Installing CreateRepo for local filesystem repo"
 if ! sudo zypper --non-interactive in createrepo; then
 f_error "Failed to install createrepo. Aborting"
 fi
fi
if [[ ! -d "${LOCALREPO}" ]]; then
 echo "Creating local filesystem repo at ${LOCALREPO}"
 if ! sudo mkdir -p ${LOCALREPO}; then
  f_error "Failed to create local filesystem repo at ${LOCALREPO}. Aborting"
 fi
fi
if ! sudo find ${LOCALREPO} -type d -exec chmod 777 {} \+; then
 f_error "Failed to chmod ${LOCALREPO}"
fi
if ! sudo find ${LOCALREPO} -type f -exec chmod 666 {} \+; then
 f_error "Failed to chmod ${LOCALREPO}"
fi
f_update_local_repo
if [[ ! -f /etc/zypp/repos.d/${SCRIPTNAME}.repo ]]; then
 echo "Adding local file system repository to zypper"
 if ! sudo zypper ar -G --refresh "${LOCALREPO}" "${SCRIPTNAME}"; then
  f_error "Failed to add local repo to zypper. Aborting" 
 fi
fi
f_create_crontab
}

f_update_local_repo() {
echo "Moving RPMs from your rpmbuild ${RPMSDIR} to your local repo ${LOCALREPO}"
find "${RPMSDIR}"/"${RPMARCH}"/ -name spotify-client-*"${RPMARCH}".rpm -type f -exec mv -t "${LOCALREPO}" {} \+
if ! createrepo "${LOCALREPO}"; then
 f_error "Failed to create local repo. Aborting"
fi
}

f_create_crontab() {
if ! crontab -l | grep "${SCRIPTNAME}"; then
 echo "Creating cron job in your crontab"
 crontab -l > "${CRONFILE}"
 cat << EOF >> "${CRONFILE}"
@${FREQUENCY} /usr/bin/${SCRIPTNAME} -scheduled
EOF
fi
if crontab "${CRONFILE}"; then
  rm "${CRONFILE}"
else
  rm "${CRONFILE}"
  f_error "Failed to create cron job in your crontab"
fi
# Remove legacy cronfile if present
if [[ -f /etc/cron.d/"${SCRIPTNAME}" ]]; then
  echo "Removing legacy cronfile at /etc/cron.d/${SCRIPTNAME}"
  sudo rm /etc/cron.d/"${SCRIPTNAME}"
fi
}

f_remove_schedule() {
 if crontab -l | grep "${SCRIPTNAME}"; then
  echo "Removing ${SCRIPTNAME} from your crontab"
  crontab -l | grep -v "${SCRIPTNAME}" > "${CRONFILE}"
  crontab "${CRONFILE}"
  rm "${CRONFILE}"
 fi
 if [[ -f /etc/zypp/repos.d/${SCRIPTNAME}.repo ]]; then
  echo "Removing ${SCRIPTNAME} zypper repo"
  sudo zypper rr "${SCRIPTNAME}"
 fi
 if [[ -d "${LOCALREPO}" ]]; then
  echo "Removing ${SCRIPTNAME} repo from filesystem"
  sudo rm -r "${LOCALREPO}"
 fi
 # Remove legacy cronfile if present
if [[ -f /etc/cron.d/"${SCRIPTNAME}" ]]; then
  echo "Removing legacy cronfile at /etc/cron.d/${SCRIPTNAME}"
  sudo rm /etc/cron.d/"${SCRIPTNAME}"
fi
}


## NO ROOT MODE FUNCTIONS ##


f_desktop_entry_noroot() {
cat << EOF >> "${NOROOTDESKTOPFILEDIR}"/spotify.desktop
[Desktop Entry]
Name=Spotify
GenericName=Music Player
Comment=Spotify streaming music client
Icon="${NOROOTINSTALLDIR}"/icons/spotify-linux-64.png
Exec=spotify %U
TryExec="${NOROOTINSTALLDIR}"/spotify
Terminal=false
Type=Application
Categories=Audio;Music;Player;AudioVideo;
MimeType=x-scheme-handler/spotify;
EOF
}

#f_install_homedir() {
#  
#}


## MAIN PROCESS FUNCTION ##


f_main() {
clear
if [[ "${RUNMODE}" == "prompt" ]]; then
 f_logo
 f_rpmbuild_deps
 f_create_rpmbuild_dir
 f_spotify_download
 f_rpm_ver_compare
 f_extract_deb
 f_prepare_rpm_src
 f_rpm_spec_bak
 f_rpm_spec
 f_run_rpmbuild
 f_install_rpm_prompt
 f_create_schedule_prompt
elif [[ "${RUNMODE}" == "scheduled" ]]; then
 f_spotify_download
 f_rpm_ver_compare
 f_extract_deb
 f_prepare_rpm_src
 f_rpm_spec_bak
 f_rpm_spec
 f_run_rpmbuild
 f_update_local_repo
elif [[ "${RUNMODE}" == "noroot" ]]; then
 f_logo
 f_create_rpmbuild_dir
 f_spotify_download
 f_extract_deb
elif [[ "${RUNMODE}" == "remove-schedule" ]]; then
 f_logo
 f_remove_schedule
fi
}

### EXECUTION BEGINS ###

f_help
f_root_check
f_arch_check
f_mode_check
f_cleanup
f_config
f_main
f_cleanup
